//----------------------------------------------------------------------------
// File:MZscrn.cpp
// MZ-700 Emulator m5z700 for M5Stack(with SRAM)
// m5z700:VRAM/CRT Emulation Module based on mz80rpi
// modified by @shikarunochi
//
// mz80rpi by Nibble Lab./Oh!Ishi, based on MZ700WIN
// (c) Nibbles Lab./Oh!Ishi 2017
//----------------------------------------------------------------------------
#include <M5Atom.h>
#include "FS.h"
#include <SPIFFS.h>
#include <time.h>
#include <unistd.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
//#include <linux/fb.h>
//#include <linux/fs.h>
//#include <sys/mman.h>
//#include <sys/ioctl.h>
#include <stdbool.h>
#include "m5z700.h"

#include "mz700lgfx.h"

//
#include "z80.h"
//
#include "mzmain.h"
#include "MZhw.h"
#include "mzscrn.h"

uint16_t c_bright;
#define c_dark BLACK

//フレームバッファ
//static LGFX_Sprite fb(&m5lcd); // スプライトを使う場合はLGFX_Spriteのインスタンスを作成。
//TFT_eSprite fb = TFT_eSprite(&M5.Lcd);
#ifdef USE_EXT_LCD
LGFX_Sprite canvas(&m5lcd);


//6x8 MZ-80 font data by @sino71030780
UINT8 mz_font_6x8[] = {
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x3E,0x50,0x90,0x50,0x3E,
0x00,0x82,0xFE,0x92,0x92,0x6C,
0x00,0x38,0x44,0x82,0x82,0x44,
0x00,0x82,0xFE,0x82,0x44,0x38,
0x00,0xFE,0x92,0x92,0x92,0x82,
0x00,0xFE,0x90,0x90,0x90,0x80,
0x00,0x7C,0x82,0x92,0x92,0x5C,
0x00,0xFE,0x10,0x10,0x10,0xFE,
0x00,0x00,0x82,0xFE,0x82,0x00,
0x00,0x04,0x02,0x82,0xFC,0x80,
0x00,0xFE,0x10,0x28,0x44,0x82,
0x00,0xFE,0x02,0x02,0x02,0x02,
0x00,0xFE,0x40,0x30,0x40,0xFE,
0x00,0xFE,0x40,0x20,0x10,0xFE,
0x00,0x7C,0x82,0x82,0x82,0x7C,

0x00,0xFE,0x90,0x90,0x90,0x60,
0x00,0x7C,0x82,0x8A,0x84,0x7A,
0x00,0xFE,0x90,0x98,0x94,0x62,
0x00,0x64,0x92,0x92,0x92,0x4C,
0x00,0x80,0x80,0xFE,0x80,0x80,
0x00,0xFC,0x02,0x02,0x02,0xFC,
0x00,0xE0,0x18,0x06,0x18,0xE0,
0x00,0xFE,0x04,0x38,0x04,0xFE,
0x00,0xC6,0x28,0x10,0x28,0xC6,
0x00,0xE0,0x10,0x1E,0x10,0xE0,
0x00,0x86,0x8A,0x92,0xA2,0xC2,
0x08,0x08,0x08,0xFF,0x08,0x08,
0x00,0x00,0x00,0xF8,0x08,0x08,
0x08,0x08,0x08,0xF8,0x00,0x00,
0x00,0x00,0x00,0xFF,0x08,0x08,
0x08,0x08,0x08,0xF8,0x08,0x08,

0x00,0x7C,0x8A,0x92,0xA2,0x7C,
0x00,0x22,0x42,0xFE,0x02,0x02,
0x00,0x46,0x8A,0x92,0x92,0x62,
0x00,0x44,0x92,0x92,0x92,0x6C,
0x00,0x18,0x28,0x48,0xFE,0x08,
0x00,0xE4,0xA2,0xA2,0xA2,0x9C,
0x00,0x7C,0x92,0x92,0x92,0x0C,
0x00,0xC0,0x80,0x9E,0xA0,0xC0,
0x00,0x6C,0x92,0x92,0x92,0x6C,
0x00,0x60,0x92,0x92,0x94,0x78,
0x00,0x10,0x10,0x10,0x10,0x00,
0x00,0x28,0x28,0x28,0x28,0x00,
0x00,0x00,0x01,0x26,0x00,0x00,
0x02,0x04,0x08,0x10,0x20,0x40,
0x00,0x00,0x00,0x02,0x00,0x00,
0x00,0x00,0x01,0x06,0x00,0x00,

0x40,0x40,0x40,0x40,0x40,0x40,
0x00,0xFF,0x00,0x00,0x00,0x00,
0xFF,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0xFF,
0x10,0x10,0x10,0x10,0x10,0x10,
0x00,0x00,0x00,0xFF,0x00,0x00,
0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,
0xFF,0xFF,0x00,0x00,0x00,0x00,
0x04,0x04,0x04,0x04,0x04,0x04,
0x00,0x00,0x00,0x00,0xFF,0x00,
0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
0x00,0x00,0x00,0xFF,0xFF,0xFF,
0x01,0x01,0x01,0x01,0x01,0x01,
0x00,0x00,0x00,0x00,0x00,0xFF,
0x03,0x03,0x03,0x03,0x03,0x03,
0x00,0x00,0x00,0x00,0xFF,0xFF,

0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x3A,0x7E,0xFE,0x7E,0x3A,
0x80,0xE0,0xF0,0xF8,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x00,0x10,0x7C,0xFE,0x7C,0x10,
0x08,0x1C,0x2A,0x08,0x08,0x08,
0x00,0x38,0x90,0xFE,0x90,0x38,
0x3C,0x7E,0x7E,0x7E,0x7E,0x3C,
0x3C,0x42,0x42,0x42,0x42,0x3C,
0x40,0x80,0x8A,0x90,0x90,0x60,
0xFF,0xC7,0x83,0x83,0xC7,0xFF,
0x00,0x00,0x00,0x03,0x04,0x08,
0x08,0x08,0x04,0x03,0x00,0x00,
0xFF,0x7F,0x1F,0x07,0x03,0x01,
0x01,0x03,0x07,0x1F,0x7F,0xFF,
0x00,0x00,0x00,0x24,0x00,0x00,

0x00,0x10,0x20,0x7E,0x20,0x10,
0x10,0x38,0x6C,0xC6,0x82,0x00,
0x00,0xFE,0x82,0x82,0x82,0x00,
0x00,0x78,0xFC,0x7E,0xFC,0x78,
0x00,0x82,0x82,0x82,0xFE,0x00,
0x38,0x44,0x92,0xAA,0x9A,0x72,
0xFF,0xFE,0xF8,0xF0,0xC0,0x80,
0x00,0x82,0xC6,0x6C,0x38,0x10,
0xAA,0x55,0xAA,0x00,0x00,0x00,
0x40,0x20,0x10,0x08,0x04,0x02,
0xAA,0x55,0xAA,0x55,0xAA,0x55,
0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,
0x00,0x00,0x00,0x0F,0x08,0x08,
0x08,0x08,0x08,0x0F,0x00,0x00,
0x08,0x08,0x08,0xFF,0x00,0x00,
0x08,0x08,0x08,0x0F,0x08,0x08,

0x08,0x10,0x1E,0x10,0x1E,0x20,
0x00,0x00,0xF2,0x00,0x00,0x00,
0x00,0xE0,0x00,0x00,0xE0,0x00,
0x28,0xFE,0x28,0x28,0xFE,0x28,
0x00,0x24,0x54,0xFE,0x54,0x48,
0xC2,0xC4,0x08,0x10,0x26,0x46,
0x6C,0x92,0x92,0x6A,0x04,0x0A,
0x00,0x00,0x20,0x40,0x80,0x00,
0x00,0x00,0x38,0x44,0x82,0x00,
0x00,0x82,0x44,0x38,0x00,0x00,
0x00,0x10,0x10,0x7C,0x10,0x10,
0x00,0x54,0x38,0xFE,0x38,0x54,
0x0F,0x0F,0x0F,0xF0,0xF0,0xF0,
0x81,0x66,0x18,0x18,0x66,0x81,
0x08,0x08,0x10,0xE0,0x00,0x00,
0x00,0x00,0x00,0xE0,0x10,0x08,

0x80,0x80,0x80,0x80,0x80,0x80,
0xFF,0x00,0x00,0x00,0x00,0x00,
0xFF,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0xFF,
0x20,0x20,0x20,0x20,0x20,0x20,
0x00,0x00,0xFF,0x00,0x00,0x00,
0x01,0x06,0x08,0x10,0x60,0x80,
0x80,0x60,0x10,0x08,0x06,0x01,
0x08,0x08,0x08,0x08,0x08,0x08,
0x00,0x00,0x00,0xFF,0x00,0x00,
0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,
0xFF,0xFF,0xFF,0x00,0x00,0x00,
0x04,0x04,0x04,0x04,0x04,0x04,
0x00,0x00,0x00,0x00,0xFF,0x00,
0x07,0x07,0x07,0x07,0x07,0x07,
0x00,0x00,0x00,0xFF,0xFF,0xFF,

0x00,0x04,0x02,0x3F,0x02,0x04,
0x00,0x50,0x52,0x7C,0x90,0x10,
0x00,0x42,0x42,0x42,0x42,0x7E,
0x00,0x60,0x12,0x02,0x04,0x78,
0x00,0x52,0x52,0x02,0x04,0x38,
0x00,0x08,0x10,0x3E,0x40,0x80,
0x00,0x3E,0x00,0x80,0x40,0x3E,
0x00,0x50,0x50,0xFE,0x50,0x50,
0x00,0x10,0x62,0x42,0x44,0x78,
0x00,0x02,0x42,0x42,0x42,0x02,
0x00,0x40,0x48,0x44,0x4A,0x70,
0x00,0x00,0x02,0x04,0xF8,0x00,
0x00,0xF0,0x02,0x04,0xF8,0x00,
0x00,0x50,0x7C,0x52,0x52,0x52,
0x00,0x04,0x54,0x54,0x54,0x02,
0x00,0x20,0xA0,0xA2,0xA4,0x38,

0x00,0x40,0xFC,0x42,0x52,0x62,
0x00,0x10,0x62,0x52,0x4C,0x78,
0x00,0x42,0x44,0x48,0x54,0x62,
0x00,0x00,0x00,0xFE,0x10,0x08,
0x00,0x42,0xFC,0x40,0x42,0x7C,
0x00,0x22,0x24,0xF8,0x20,0x20,
0x00,0xFC,0x22,0x22,0x22,0x22,
0x00,0x20,0xA2,0xBC,0xA0,0x20,
0x00,0x40,0xF2,0x44,0xF8,0x40,
0x00,0x42,0x42,0x02,0x04,0x18,
0x00,0x70,0x00,0x72,0x04,0x78,
0x00,0x7E,0x42,0x42,0x42,0x7E,
0x00,0x20,0xC0,0x42,0x7C,0x40,
0x00,0x00,0xF0,0x80,0x80,0x80,
0x00,0x20,0x22,0x2C,0x28,0x30,
0x00,0x10,0x3E,0x10,0x14,0x18,

0x00,0x70,0x40,0x42,0x44,0x78,
0x00,0x42,0x54,0x48,0x54,0x60,
0x00,0x40,0x42,0x42,0x44,0x78,
0x00,0x80,0x82,0xBC,0x90,0xE0,
0x00,0x70,0x40,0xC2,0x44,0x78,
0x00,0x42,0x42,0x7E,0x42,0x42,
0x00,0x44,0x48,0x50,0xFE,0x40,
0x00,0x20,0xFE,0x20,0x28,0x30,
0x00,0x02,0x42,0x42,0x7E,0x02,
0x00,0x52,0x52,0x52,0x52,0x7E,
0x00,0x4C,0x40,0xFE,0x40,0x4C,
0x00,0x20,0x40,0x20,0x10,0x0C,
0x00,0xFE,0x02,0x04,0x08,0x10,
0x00,0x02,0x14,0x08,0x14,0x60,
0x00,0x3E,0x00,0x7E,0x02,0x0C,
0x00,0x44,0x48,0xDE,0x68,0x44,

0x00,0x1C,0x24,0x44,0x04,0x0E,
0x02,0x02,0x02,0x1E,0x00,0x00,
0x00,0x04,0x08,0x1E,0x20,0x00,
0x00,0x02,0x12,0x12,0x1E,0x02,
0x00,0x50,0x50,0x52,0x54,0x78,
0x08,0x04,0x02,0x00,0x00,0x00,
0x00,0x18,0x10,0x32,0x12,0x1C,
0x00,0x2A,0x2A,0x2A,0x3E,0x00,
0x00,0xE0,0xA0,0xE0,0x00,0x00,
0x00,0x02,0x00,0x00,0x00,0x00,
0x00,0x12,0x12,0x1E,0x12,0x12,
0x00,0x18,0x02,0x1A,0x02,0x1C,
0x00,0x20,0x90,0x40,0x00,0x00,
0x0E,0x0A,0x0E,0x00,0x00,0x00,
0x00,0x12,0x14,0x18,0x3E,0x10,
0x00,0x00,0x10,0x10,0x00,0x00,

0x00,0x22,0xF2,0xFA,0xF2,0x22,
0xFF,0xF7,0xFB,0x81,0xFB,0xF7,
0xFF,0xEF,0xDF,0x81,0xDF,0xEF,
0xF7,0xF7,0xF7,0xD5,0xE3,0xF7,
0xF7,0xE3,0xD5,0xF7,0xF7,0xF7,
0x01,0xEF,0xEF,0xEF,0xEF,0x01,
0xC7,0xBB,0x7D,0x7D,0x7D,0xBB,
0x10,0x38,0xD0,0xD0,0x38,0x10,
0x82,0xFE,0x92,0x54,0x7C,0x44,
0x07,0xE2,0x42,0x7E,0x42,0xE7,
0x00,0x11,0xD2,0xFC,0xD2,0x11,
0x38,0x38,0x10,0x7C,0x10,0x28,
0x28,0x10,0x7C,0x10,0x38,0x38,
0x00,0x88,0x4B,0x3F,0x4B,0x88,
0x7C,0xDE,0xF6,0xF6,0xDE,0x7C,
0x7C,0xA2,0x8A,0x8A,0xA2,0x7C,

0x00,0xFE,0x92,0x92,0x92,0xFE,
0x02,0xFC,0xA8,0xA8,0xA8,0xFE,
0x02,0x64,0x08,0xF0,0x08,0x66,
0x02,0x24,0x28,0xFE,0x14,0x22,
0x44,0x48,0x50,0xFE,0x50,0x4C,
0x12,0x2A,0x6E,0xBE,0x6E,0x2A,
0x02,0x22,0x22,0xFE,0x22,0x22,
0xE2,0x4A,0x4A,0xFE,0x4A,0x4A,
0xC4,0x5C,0x54,0x7E,0x54,0x54,
0x7C,0x54,0x5E,0xF4,0x5E,0x14,
0x12,0x34,0x58,0x92,0x52,0x3C,
0xA4,0xFE,0xA8,0x22,0x7C,0x38,
0x00,0xFE,0x90,0xF0,0x90,0xFE,
0x00,0xA8,0x68,0x3E,0x68,0xA8,
0x00,0x12,0x7E,0x92,0x82,0x42,
0x60,0x7C,0x02,0x3C,0x40,0x3F,

0x02,0x02,0x02,0x02,0x0F,0x02,
0x00,0x00,0x00,0x02,0xFF,0x02,
0x02,0x02,0x02,0x02,0xFF,0x02,
0x08,0x10,0x08,0x04,0x02,0x04,
0x08,0x10,0x20,0x50,0x68,0x44,
0x49,0x46,0x40,0x40,0x46,0x49,
0x44,0x68,0x50,0x20,0x10,0x08,
0x7F,0x22,0x14,0x08,0x7F,0x08,
0x08,0x7F,0x08,0x14,0x22,0x7F,
0xFF,0x18,0x25,0x43,0x87,0x00,
0x00,0xA1,0x62,0xE4,0x18,0xFF,
0x11,0x0A,0x04,0x04,0x04,0x04,
0x04,0x1F,0x00,0x00,0x1F,0x04,
0x00,0x24,0x24,0xE7,0x24,0x24,
0x00,0x40,0xA0,0x11,0x0A,0x04,
0x55,0xAA,0x55,0xAA,0x55,0xAA,

0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x60,0x60,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x60,0x60,
0x00,0x60,0x60,0x00,0x60,0x60,
0x00,0x06,0x06,0x00,0x00,0x00,
0x00,0x66,0x66,0x00,0x00,0x00,
0x00,0x06,0x06,0x00,0x60,0x60,
0x00,0x66,0x66,0x00,0x60,0x60,
0x00,0x00,0x00,0x00,0x06,0x06,
0x00,0x60,0x60,0x00,0x06,0x06,
0x00,0x00,0x00,0x00,0x66,0x66,
0x00,0x60,0x60,0x00,0x66,0x66,
0x00,0x06,0x06,0x00,0x06,0x06,
0x00,0x66,0x66,0x00,0x06,0x06,
0x00,0x06,0x06,0x00,0x66,0x66,
0x00,0x66,0x66,0x00,0x66,0x66
};

#endif


int fontOffset = 0;
int fgColor = 0;
int bgColor = 0;
int fgColorIndex = 0;
int bgColorIndex = 0;
int MZ700_COLOR[] = {BLACK, BLUE, RED, MAGENTA, GREEN, CYAN, YELLOW, WHITE};

int ldcMode = 0;

boolean needScreenUpdateFlag;
boolean screnUpdateValidFlag;

String statusAreaMessage;

void update_scrn_thread(void *pvParameters);

/*
   表示画面の初期化
*/
int mz_screen_init(void)
{
  needScreenUpdateFlag = false;
  screnUpdateValidFlag = false;

  #ifdef USE_EXT_LCD
  canvas.setColorDepth(8);
  canvas.setTextSize(1);
  canvas.createSprite(40,240); //メモリ足りないので縦40ドット（=5行）に分割して5回に分けて描画する。8x6フォントを90度横向きで描画した後、90度回転させてpushする。
  #endif


  statusAreaMessage = "";

  xTaskCreatePinnedToCore(update_scrn_thread, "update_scrn_thread", 4096, NULL, 1, NULL, 0);
  screnUpdateValidFlag = true;
  return 0;
}

/*
   画面関係の終了処理
*/
void mz_screen_finish(void)
{
}

void set_scren_update_valid_flag(boolean flag){
  screnUpdateValidFlag = flag;
}
/*
   フォントデータを描画用に展開
*/
int font_load(const char *fontfile)
{
  FILE *fdfont;
  int dcode, line, bit;
  UINT8 lineData;
  uint16_t color;

  String romDir = ROM_DIRECTORY;
  String fontFile = DEFAULT_FONT_FILE;
  File dataFile = SPIFFS.open(romDir + "/" + fontFile, FILE_READ);
  if (!dataFile) {
    Serial.println("FONT FILE NOT FOUNT");
    perror("Open font file");
    return -1;
  }

  for (dcode = 0; dcode < 256 * 2; dcode++) //拡張フォントも読み込む
  {
    for (line = 0; line < 8; line++)
    {
      if (dataFile.available()) {
        lineData = dataFile.read();
        mz_font[dcode * 8 + line] = lineData;
        if (dcode >= 128 && dcode < 256 ) { //通常フォント後半の場合PCG初期値として設定する
          pcg700_font[(dcode & 0x7F) * 8 + line] = lineData;
          pcg700_font[(dcode) * 8 + line] = lineData;
        }
      }
    }
    delay(10);
  }
  Serial.println("END READ ROM");

  dataFile.close();
  return 0;
}
/**********************/
/* redraw the screen */
/*********************/
void update_scrn(void) {
  needScreenUpdateFlag = true;
}


void update_scrn_thread(void *pvParameters)
{
  while (1) {
    if (needScreenUpdateFlag == true && screnUpdateValidFlag == true) {
      //m5lcd.startWrite();
      needScreenUpdateFlag = false;
      UINT8 ch;
      UINT8 chAttr;
      UINT8 lineData;
      uint8_t *fontPtr;
      //	struct timespec h_start, h_end, h_split;
      //uint32_t ptr = 0;//YOFFSET;
      int ptr = 0;//YOFFSET;
      //	int32_t hwait;
      //	int32_t htime = 62000;	// 64us
      uint16_t blankdat[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      int color;
      hw700.retrace = 1;

      hw700.cursor_cou++;
      if (hw700.cursor_cou >= 40)													/* for japan.1/60 */
      {
        hw700.cursor_cou = 0;
      }
      /*
        int screenY = 0;
        for(int cy = 0; cy < 1000; cy+=40)
        {
      	for(int cl = 0; cl < 8; cl++)
      	{
        //			clock_gettime(CLOCK_MONOTONIC_RAW, &h_start);
      		for(int cx = 0; cx < 40; cx++)
      		{
      			ch = mem[VID_START + cx + cy];
      			if(hw700.vgate == 0)
      			{
      			//	//memcpy(fbptr + ptr, blankdat, sizeof(uint16_t) * 8);
              // //fb.drawBitmap(0,ptr,8,8, 0);
      			}
      			else
      			{
      				//memcpy(fbptr + ptr, (hw700.pcg700_mode == 0) ? mz_font[ch * 8 + cl] : pcg700_font[ch * 8 + cl], sizeof(uint16_t) * 8);
               lineData = (hw700.pcg700_mode == 0) ? mz_font[ch * 8 + cl] : pcg700_font[ch * 8 + cl];
               //for(int bit = 0;bit < 8;bit++){
               //   color = (lineData & 0x80) == 0 ? c_dark : c_bright;
               //   fb.drawPixel(cx * 8 + bit, screenY * 8 + cl,color);
               //   lineData <<= 1;
               //}
      			}
      		}
        }
      */
      fontOffset = 0;
      fgColor = 0;
      bgColor = 0;
      fgColorIndex = 0;
      bgColorIndex = 0;
      #ifdef USE_EXT_LCD
      int drawIndex = 0;
      #endif
      for (int cy = 0; cy < 25; cy++) {
        for (int cx = 0; cx < 40; cx++) {
          ch = mem[VID_START + cx + cy * 40];
          if (mzConfig.mzMode == MZMODE_700) {
            chAttr = mem[VID_START + cx + cy * 40 + 0x800];
            if ((chAttr & 0x80) == 0x80) { //MZ-700キャラクタセット
              fontOffset = 0x100;
            } else {
              fontOffset = 0;
            }
            //Color
            fgColorIndex = ((chAttr >> 4) & 0x07) ;
            bgColorIndex = (chAttr & 0x07);

            if (fgColorIndex <= 7) {
              fgColor = MZ700_COLOR[fgColorIndex];
            } else {
              fgColor = MZ700_COLOR[7];
              Serial.print("fgColorIndexError:");
              Serial.print(fgColorIndex);
            }
            if (bgColorIndex <= 7) {
              bgColor = MZ700_COLOR[bgColorIndex];
            } else {
              fgColor = MZ700_COLOR[0];
              Serial.print("bgColorIndexError:");
              Serial.print(bgColorIndex);
            }
          } else {
            fgColor = c_bright;
            bgColor = c_dark;
          }
          //fb.drawBitmap(cx * 8, cy * 8, (const uint8_t *)((hw700.pcg700_mode == 0) ? mz_font[ch * 8] : pcg700_font[ch * 8]), 8, 8, fgColor);
          #ifdef USE_EXT_LCD
           canvas.fillRect((cy * 8) % 40, cx * 6, 8, 6, bgColor);
           fontPtr = &mz_font_6x8[(ch) * 6]; //PCGとMZ-700フォントには対応していないため。
          #else
            m5lcd.fillRect(cx * 8, cy * 8, 8, 8, bgColor);
          if (hw700.pcg700_mode == 0 || !(ch & 0x80)) {
              fontPtr = &mz_font[(ch + fontOffset) * 6];
          } else {
            if ((chAttr & 0x80) != 0x80) {
              fontPtr = &pcg700_font[(ch & 0x7F) * 8];
            } else {
              fontPtr = &pcg700_font[(ch) * 8];
            }
          }
          #endif
          #ifdef USE_EXT_LCD
            canvas.drawBitmap((cy * 8) % 40, cx * 6, fontPtr, 8, 6, fgColor);
          #else
            m5lcd.drawBitmap(cx * 8, cy * 8, fontPtr, 8, 8, fgColor);
          #endif
        }
        #ifdef USE_EXT_LCD
        if((cy+1)%5 == 0){
          canvas.pushRotateZoom(120, 40 * drawIndex + 20,90,1,-1); 
          drawIndex = drawIndex + 1;
        }
        #endif
      }
      if(statusAreaMessage.equals("")==false){
        #ifdef USE_EXT_LCD
          m5lcd.setTextColor(TFT_WHITE);
          m5lcd.setTextSize(1);
          m5lcd.fillRect(0, 180, 240, 20, TFT_BLACK);
          m5lcd.setCursor(0, 180);
          m5lcd.print(statusAreaMessage);
        #else
          m5lcd.setTextColor(TFT_WHITE);
          m5lcd.setTextSize(1);
          m5lcd.fillRect(0, 180, 320, 20, TFT_BLACK);
          m5lcd.setCursor(0, 180);
          m5lcd.print(statusAreaMessage);
        #endif
      }


      //			clock_gettime(CLOCK_MONOTONIC_RAW, &h_split);
      //			do
      //			{
      //				clock_gettime(CLOCK_MONOTONIC_RAW, &h_end);
      //				if(h_end.tv_nsec < h_start.tv_nsec)
      //				{
      //					hwait = htime - (1000000000 + h_end.tv_nsec - h_start.tv_nsec);
      //				}
      //				else
      //				{
      //					hwait = htime - (h_end.tv_nsec - h_start.tv_nsec);
      //				}
      //			}
      //			while(hwait > 0);
      //		//}
      //    screenY += 1;
      //	}

      //	printf("H-start = %ld, H-end = %ld\n", h_start.tv_nsec, h_end.tv_nsec);
      //	printf("H-disp  = %ld\n", h_split.tv_nsec);
      //	printf("V-start = %ld, H-end = %ld\n", v_start.tv_nsec, v_end.tv_nsec);
      //	printf("V-blank = %ld\n", v_wait.tv_nsec);
      //m5lcd.endWrite();
    }
    delay(10);
  }
}

void updateStatusArea(const char* message) {
  statusAreaMessage = String(message);
}
